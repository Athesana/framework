<?xml version="1.0" encoding="UTF-8"?>

<!-- Mapper 설정 파일임을 선언 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- mapper의 namespace 속성 : 외부에서 mapper에 접근할 수 있는 이름 -->
<!-- mapper 태그 안에 작성할 내용을 적는다. -->
<mapper namespace="memberMapper">
	<!-- 
		중복되는 쿼리 내용을 재사용하기 위한 SQL 조각이다.
		사용하려는 태그보다 항상 최상단에 위치해야 한다.
	 -->
	<sql id="selectMemberSql">
		SELECT NO, 
		       ID, 
		       PASSWORD, 
		       ROLE, 
		       NAME, 
		       PHONE, 
		       EMAIL, 
		       ADDRESS, 
		       HOBBY, 
		       STATUS, 
		       ENROLL_DATE, 
		       MODIFY_DATE
		FROM MEMBER
	</sql>

	<!-- 
		resultMap은 DB의 조회 결과와 자바 객체를 명시적으로 매핑해줄 때 사용한다. (JDBC 코드를 줄이는 역할을 한다.)
			- type 속성 : ResultSet의 결과를 담을 자바 객체의 타입(클래스명 - 풀패키지로) 기입한다. (또는 alias 사용)
			- id 속성   : resultMap의 고유 아이디로 select 문에서 resultMap 속성에 사용한다. 
	 -->
	<resultMap type="Member" id="memberResultMap">
		<!-- property : 자바 객체의 필드명을 기술, column : DB에서 select 구문에 지정된 컬럼명을 기술 -->
		<!-- id : 테이블에서 조회된 기본 키를 매핑할 때 사용, 기본 키를 의미 -->
		<id property="no" column="NO"/>
		<!-- result : 테이블에서 일반 컬럼들을 의미 -->
		<result property="id" column="ID"/>
		<result property="password" column="PASSWORD"/>
		<result property="role" column="ROLE"/>
		<result property="name" column="NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="email" column="EMAIL"/>
		<result property="address" column="ADDRESS"/>
		<result property="hobby" column="HOBBY"/>
		<result property="status" column="STATUS"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>

	<!-- 
		SELECT 구문
			id 속성 : 쿼리문의 고유 아이디(외부에서 참조할 때 id 속성을 가지고 참조한다.)
			resultType 속성 : 쿼리 실행 후 조회된 결과 값의 자료형(자료형은 Mybatis 내장 별칭으로 작성한다.)
			parameterType 속성 : 쿼리문을 실행하기 위해 전달받는 파라미터의 타입이나 별칭, 클래스명(패키지 경로 포함)
			
			- SQL 조회 구문을 작성할 때 사용하는 태그, 해당 쿼리를 외부에서 접근하고 싶을 때, namespace.id 명을 적는다.
			- #{ field } : 외부에서 받은 파라미터를 사용할 때 쓰인다. 전달된 값을 뜻한다. WHERE 절에 쓰인다. 
							pstmt의 “?” 위치 홀더의 역할이다. 여러 줄로 줄바꿈 문자를 섞어서 사용도 가능하다. 
							단, 쿼리의 마지막을 알리는 세미콜론은 작성하지 않는다.
	 -->
 	<select id="selectCount" resultType="_int">
 		SELECT COUNT(*) FROM MEMBER 
 	</select>
 
 
 	<!-- 
		쿼리문의 수행 결과가 담긴 ResultSet은 resultType의 객체에 자동으로 mapping 되어 리턴된다.
		단, 조회 결과의 컬럼명과 자바 클래스에서 필드명이 동일해야 자동으로 mapping 된다. (대소문자는 구분하지 않는다.)
		
		해결 방법 
			1) 쿼리문에서 별칭을 사용한다. "as 별칭"으로 조회되는 컬럼명을 변경한다. -> 유지보수가 문제로 추천하지 않음
			2) resultMap을 이용해서 명시적으로 조회하는 컬럼명과 객체의 변수명(필드명)을 mapping 시킨다. -> 추천 방법!
 	 -->
 	
 	<!-- 방법 1 : 별칭 사용 
 	<select id="selectAll" resultType="com.kh.mybatis.member.model.vo.Member">
 		SELECT NO, 
		       ID, 
		       PASSWORD, 
		       ROLE, 
		       NAME, 
		       PHONE, 
		       EMAIL, 
		       ADDRESS, 
		       HOBBY, 
		       STATUS, 
		       ENROLL_DATE AS enrollDate, 
		       MODIFY_DATE AS modifyDate
		FROM MEMBER
		WHERE STATUS = 'Y'
 	-->
 	
 	<!-- 방법 2 : resultMap 사용 -->
 	<select id="selectAll" resultMap="memberResultMap">
 	<!-- 
 		SELECT NO, 
		       ID, 
		       PASSWORD, 
		       ROLE, 
		       NAME, 
		       PHONE, 
		       EMAIL, 
		       ADDRESS, 
		       HOBBY, 
		       STATUS, 
		       ENROLL_DATE, 
		       MODIFY_DATE
		FROM MEMBER
		WHERE STATUS = 'Y'
 	 -->
 	 
 	 <include refid="selectMemberSql" />
 	 WHERE STATUS = 'Y'
 	 
 	</select>
 	
 	<!-- 
 		외부에서 매개변수로 받는 값이 있으면 해당하는 매개변수의 타입을 지정해야 한다. -> parameterType은 string도 되고 map도 된다. 
 		외부에서 매개변수로 받은 값은 #{변수명}로 설정해서 값을 가져온다.
 	-->
 	<select id="selectMemberById" parameterType="string" resultMap="memberResultMap">
 		<include refid="selectMemberSql" />
		WHERE ID= #{id} AND STATUS = 'Y'
 	</select>
 	
 	<!-- 
 		#{} 안의 값은 필드명과 동일하게 작성해야 한다. 
 		데이터를 isnert 하고, PK 값을 받아오기 위해서 useGeneratedKeys, keyColumn, keyProperty 속성을 추가한다.
 		
 			- useGeneratedKeys : insert 후에 PK 값을 받아올 수 있도록 허용하는 속성
 			- keyProperty 	   : PK 값이 담길 파라미터 객체의 필드명을 지정하는 속성
 			- keyColumn 	   : 실제 PK에 해당하는 컬럼을 지정하는 속성
 	-->
 	<insert id="insertMember" parameterType="Member" 
 			useGeneratedKeys="true" keyProperty="no" keyColumn="NO">
 		INSERT INTO MEMBER (
 		   NO, 
	       ID, 
	       PASSWORD, 
	       ROLE, 
	       NAME, 
	       PHONE, 
	       EMAIL, 
	       ADDRESS, 
	       HOBBY, 
	       STATUS, 
	       ENROLL_DATE, 
	       MODIFY_DATE
 		) VALUES (
 		   SEQ_UNO.NEXTVAL,
 		   #{id},
 		   #{password},
 		   DEFAULT,
 		   #{name},
 		   #{phone},
 		   #{email},
 		   #{address},
 		   #{hobby},
 		   DEFAULT,
 		   DEFAULT,
 		   DEFAULT
 		)
 	</insert> 
 
 
</mapper>