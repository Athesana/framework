<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 
		** Dispatcher Servlet에서 모든 요청을 받는데, resource를 내려주는 경우에는 Dispatcher Servlet을 탈 필요가 없다.
		   why? web server에서 처리하는 역할이기 때문에 -> resoure 요청에 대해서 매핑하는 부분
		   
		(root의 resources로 들어오는 요청에 대해서 지정된 폴더로 매핑시켜주는 태그)
		mapping 속성에 지정된 곳으로 들어오는 요청에 대해서는 Dispatcher Servlet에서 직접 처리하는 것이 아니라,
		location 속성에 지정 된 경로/디렉터리(폴더)로 매핑해서 필요한 리소스들을 내려준다.
	 -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 
		사용자로 부터 /js/jquery-3.6.0.js 라는 요청이 오면 이것을 /resources/js/jquery-3.6.0.js로 매핑시킨다.
	 -->
	<resources mapping="/js/**" location="/resources/js/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.mvc" />
	
	
	<!-- 
		DB관련 설정은 root-context.xml에서 import하는 mybatis-context.xml에 작성했지만 
		<tx:annotation-driven />는 실제 트랜잭션을 적용할 빈들이 등록되는 ApplicationContext 설정 파일에 작성해야 한다. 
	-->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- 
		인터셉터 설정
			- 인터셉터가 웹 관련 설정(in 스프링 영역)이기 때문에 root-context.xml이 아닌 servlet.context.xml에 작성한다.
	-->
	
	<interceptors>
		<interceptor>
			<!-- 인터셉터를 적용시킬 요청(컨트롤러) 선택 
			<mapping path="/member/myPage"/>
			<mapping path="/member/update"/>
			
			[와일드카드 /* , /** 의 차이점]
			
			/member/*
				- /member/insert (적용O)
				- /member/update (적용O)
				- /member/insert/10 (적용X)
				- /member/update/user (적용X)				
			
			/member/**
				- /member/insert (적용O)
				- /member/update (적용O)
				- /member/insert/10 (적용O)
				- /member/update/user (적용O)				  
			
			-->
			
			<mapping path="/member/**"/>
			<mapping path="/board/write"/>
			<mapping path="/board/update"/>
			<mapping path="/board/delete"/>			
			
			<!-- 인터셉터를 제외시킬 요청(컨트롤러) 선택 -->
			<exclude-mapping path="/member/enroll"/>
			<exclude-mapping path="/member/idCheck"/>			
			
			<!-- 인터셉터 등록 -->
			<beans:bean id="LoginCheckInterceptor" class="com.kh.mvc.common.interceptor.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>
	
	
	
</beans:beans>
